//===- MIROps.cpp - Implement the Moore MIR operations --------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implement the Moore MIR ops.
//
//===----------------------------------------------------------------------===//

#include "circt/Dialect/Moore/MIROps.h"
#include "mlir/IR/Builders.h"

using namespace circt;
using namespace circt::moore;

template <typename Ty>
static ParseResult parseValueType(OpAsmParser &p, Type &rValueType) {
  Type type;
  if (p.parseType(type))
    return p.emitError(p.getCurrentLocation(), "Expected type");
  rValueType = Ty::get(type);
  return success();
}

static ParseResult parseRValueType(OpAsmParser &p, Type &rValueType) {
  return parseValueType<RValueType>(p, rValueType);
}

static void printRValueType(OpAsmPrinter &p, Operation *, Type rValueType) {
  p.printType(rValueType.cast<RValueType>().getNestedType());
}

static ParseResult parseLValueType(OpAsmParser &p, Type &rValueType) {
  return parseValueType<LValueType>(p, rValueType);
}

static void printLValueType(OpAsmPrinter &p, Operation *, Type rValueType) {
  p.printType(rValueType.cast<LValueType>().getNestedType());
}

//===----------------------------------------------------------------------===//
// TableGen generated logic.
//===----------------------------------------------------------------------===//

// Provide the autogenerated implementation guts for the Op classes.
#define GET_OP_CLASSES
#include "circt/Dialect/Moore/Moore.cpp.inc"
#include "circt/Dialect/Moore/MooreEnums.cpp.inc"
#include "circt/Dialect/Moore/MooreStructs.cpp.inc"
