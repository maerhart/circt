//===- SystemCStructure.td - SystemC structure ops ---------*- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This describes ops with regions for SystemC to structure other ops, such as
// modules, methods, etc.
//
//===----------------------------------------------------------------------===//

include "circt/Dialect/HW/HWOpInterfaces.td"

def SCModuleOp : SystemCOp<"module", [
    Symbol,
    HWModuleLike,
    FunctionOpInterface,
    IsolatedFromAbove,
    SingleBlock,
    NoTerminator,
    RegionKindInterface,
    DeclareOpInterfaceMethods<CallableOpInterface>,
    DeclareOpInterfaceMethods<ModuleProceduralInteropOpInterface>,
    DeclareOpInterfaceMethods<OpAsmOpInterface, ["getAsmBlockArgumentNames"]>,
    HasParent<"mlir::ModuleOp">
  ]> {
  let summary = "Define a SystemC SC_MODULE.";
  let description = [{
    Represents the SC_MODULE macro as described in IEEE 1666-2011 ยง5.2.5.
    Models input, output and inout ports as module arguments (as opposed to
    `sc_signal`s which are modeled by a separate `systemc.signal` operation),
    but are nonetheless emitted as regular struct fields.
  }];

  let arguments = (ins StrArrayAttr:$portNames);
  let regions = (region SizedRegion<1>: $body);

  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
  let hasRegionVerifier = 1;
  let skipDefaultBuilders = 1;

  let builders = [
    OpBuilder<(ins "StringAttr":$name, "ArrayRef<hw::PortInfo>":$ports,
                   CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>,
    OpBuilder<(ins "StringAttr":$name, "const hw::ModulePortInfo &":$ports,
                   CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>,
    OpBuilder<(ins "StringAttr":$name, "ArrayAttr":$portNames,
                   "ArrayRef<Type>":$portTypes,
                   CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>
  ];

  let extraClassDeclaration = [{
    // Implement RegionKindInterface.
    static RegionKind getRegionKind(unsigned index) { 
      return RegionKind::Graph;
    }

    /// Returns the type of this function.
    mlir::FunctionType getFunctionType() {
      return getFunctionTypeAttr().getValue().cast<mlir::FunctionType>();
    }

    /// Returns the argument types of this function.
    ArrayRef<mlir::Type> getArgumentTypes() {
      return getFunctionType().getInputs();
    }

    /// Returns the result types of this function.
    ArrayRef<mlir::Type> getResultTypes() {
      return getFunctionType().getResults();
    }

    // Use FunctionOpInterface traits's getBody method.
    using mlir::detail::FunctionOpInterfaceTrait<SCModuleOp>::getBody;

    /// Return the block corresponding to the region.
    Block *getBodyBlock() { return &getBody().front(); }

    /// Return the symbol name of this module as string.
    StringRef getModuleName();

    using PortDirectionRange = llvm::iterator_range<
      llvm::filter_iterator<Region::BlockArgListType::iterator,
                            std::function<bool(const BlockArgument &)>>>;

    void getPortInfoList(SmallVectorImpl<hw::PortInfo> &portInfoList);
    PortDirectionRange getPortsOfDirection(hw::PortDirection direction);
    PortDirectionRange getInputPorts() {
      return getPortsOfDirection(hw::PortDirection::INPUT);
    }
    PortDirectionRange getOutputPorts() {
      return getPortsOfDirection(hw::PortDirection::OUTPUT);
    }
    PortDirectionRange getInOutPorts() {
      return getPortsOfDirection(hw::PortDirection::INOUT);
    }

    systemc::CtorOp getOrCreateCtor();
    systemc::DestructorOp getOrCreateDestructor();
  }];
}

def CtorOp : SystemCOp<"ctor", [SingleBlock, NoTerminator,
                                HasParent<"SCModuleOp">]> {
  let summary = "A constructor definition.";
  let description = [{
    Represents the SC_CTOR macro as described in IEEE 1666-2011 ยง5.2.7.
    The name of the module being constructed does not have to be passed
    to this operation, but is automatically added during emission.
  }];

  let regions = (region SizedRegion<1>:$body);
  let assemblyFormat = "$body attr-dict";

  let builders = [
    OpBuilder<(ins), [{
      Region *region = $_state.addRegion();
      region->push_back(new Block);
    }]>
  ];

  let hasVerifier = true;
  let skipDefaultBuilders = 1;
}

def SCFuncOp : SystemCOp<"func", [
  HasCustomSSAName,
  SystemCNameDeclOpInterface,
  NoTerminator,
  HasParent<"SCModuleOp">
]> {
  let summary = "A (void)->void member function of a SC_MODULE.";
  let description = [{
    This operation does not represent a specific SystemC construct, but a
    regular C++ member function with no arguments and a void return type.
    These are used to implement module-internal logic and are registered to the
    module using the SC_METHOD, SC_THREAD, and SC_CTHREAD macros.
  }];

  let arguments = (ins StrAttr:$name);
  let results = (outs FuncHandleType:$handle);
  let regions = (region SizedRegion<1>:$body);

  let builders = [
    OpBuilder<(ins "StringAttr":$name), [{
      $_state.addAttribute(getNameAttrName($_state.name), name);
      Region *region = $_state.addRegion();
      $_state.addTypes(FuncHandleType::get($_builder.getContext()));
      region->push_back(new Block);
    }]>
  ];

  let assemblyFormat = "custom<ImplicitSSAName>($name) $body attr-dict";

  let hasVerifier = true;
  let skipDefaultBuilders = 1;
}

def DestructorOp : SystemCOp<"cpp.destructor", [SingleBlock, NoTerminator,
                                HasParent<"SCModuleOp">]> {
  let summary = "A destructor definition.";
  let description = [{
  }];

  let regions = (region SizedRegion<1>:$body);
  let assemblyFormat = "$body attr-dict";

  let builders = [
    OpBuilder<(ins), [{
      Region *region = $_state.addRegion();
      region->push_back(new Block);
    }]>
  ];

  let skipDefaultBuilders = 1;
}
